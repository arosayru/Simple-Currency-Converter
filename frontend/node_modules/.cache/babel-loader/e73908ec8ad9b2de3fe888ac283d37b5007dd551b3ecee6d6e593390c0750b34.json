{"ast":null,"code":"var _jsxFileName = \"E:\\\\Dev\\\\Assignment\\\\Simple-Currency-Converter\\\\frontend\\\\src\\\\components\\\\ExchangeRateChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GOOGLE_SHEETS_URL = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vT9jSyt2iQcLKudH3GJr6wqhsXdH6LCzHEGW-txSP5wNxLdTvoqjQ0SrpMLIajJosxoaHL2_XsXF8GB/pubhtml\";\nconst ExchangeRateChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [\"Loading...\"],\n    datasets: [{\n      label: \"Exchange Rate (USD to LKR)\",\n      data: [0],\n      borderColor: \"green\",\n      backgroundColor: \"rgba(0, 255, 0, 0.2)\",\n      fill: true\n    }]\n  });\n  useEffect(() => {\n    const fetchRates = async () => {\n      try {\n        const response = await axios.get(GOOGLE_SHEETS_URL);\n        console.log(\"Google Sheets Data:\", response.data);\n        const rate = response.data.values[0][0]; // Extract exchange rate\n        const currentTime = new Date().toLocaleTimeString();\n        setChartData(prevData => ({\n          labels: [...prevData.labels.slice(-9), currentTime],\n          datasets: [{\n            ...prevData.datasets[0],\n            data: [...prevData.datasets[0].data.slice(-9), parseFloat(rate)]\n          }]\n        }));\n      } catch (error) {\n        console.error(\"Error fetching exchange rates:\", error);\n      }\n    };\n    fetchRates();\n    const interval = setInterval(fetchRates, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: chartData,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n};\n_s(ExchangeRateChart, \"5F7mIp1B/iM+GIn4os4xI5yL1IA=\");\n_c = ExchangeRateChart;\nexport default ExchangeRateChart;\nvar _c;\n$RefreshReg$(_c, \"ExchangeRateChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","axios","jsxDEV","_jsxDEV","GOOGLE_SHEETS_URL","ExchangeRateChart","_s","chartData","setChartData","labels","datasets","label","data","borderColor","backgroundColor","fill","fetchRates","response","get","console","log","rate","values","currentTime","Date","toLocaleTimeString","prevData","slice","parseFloat","error","interval","setInterval","clearInterval","options","responsive","maintainAspectRatio","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Dev/Assignment/Simple-Currency-Converter/frontend/src/components/ExchangeRateChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport axios from \"axios\";\r\n\r\nconst GOOGLE_SHEETS_URL = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vT9jSyt2iQcLKudH3GJr6wqhsXdH6LCzHEGW-txSP5wNxLdTvoqjQ0SrpMLIajJosxoaHL2_XsXF8GB/pubhtml\";\r\n\r\nconst ExchangeRateChart = () => {\r\n  const [chartData, setChartData] = useState({\r\n    labels: [\"Loading...\"],\r\n    datasets: [\r\n      {\r\n        label: \"Exchange Rate (USD to LKR)\",\r\n        data: [0],\r\n        borderColor: \"green\",\r\n        backgroundColor: \"rgba(0, 255, 0, 0.2)\",\r\n        fill: true,\r\n      }\r\n    ]\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchRates = async () => {\r\n      try {\r\n        const response = await axios.get(GOOGLE_SHEETS_URL);\r\n        console.log(\"Google Sheets Data:\", response.data);\r\n\r\n        const rate = response.data.values[0][0]; // Extract exchange rate\r\n        const currentTime = new Date().toLocaleTimeString();\r\n\r\n        setChartData((prevData) => ({\r\n          labels: [...prevData.labels.slice(-9), currentTime],\r\n          datasets: [\r\n            {\r\n              ...prevData.datasets[0],\r\n              data: [...prevData.datasets[0].data.slice(-9), parseFloat(rate)],\r\n            }\r\n          ]\r\n        }));\r\n      } catch (error) {\r\n        console.error(\"Error fetching exchange rates:\", error);\r\n      }\r\n    };\r\n\r\n    fetchRates();\r\n    const interval = setInterval(fetchRates, 30000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return <Line data={chartData} options={{ responsive: true, maintainAspectRatio: false }} />;\r\n};\r\n\r\nexport default ExchangeRateChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,iBAAiB,GAAG,yIAAyI;AAEnK,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC;IACzCU,MAAM,EAAE,CAAC,YAAY,CAAC;IACtBC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,4BAA4B;MACnCC,IAAI,EAAE,CAAC,CAAC,CAAC;MACTC,WAAW,EAAE,OAAO;MACpBC,eAAe,EAAE,sBAAsB;MACvCC,IAAI,EAAE;IACR,CAAC;EAEL,CAAC,CAAC;EAEFjB,SAAS,CAAC,MAAM;IACd,MAAMkB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAACd,iBAAiB,CAAC;QACnDe,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,QAAQ,CAACL,IAAI,CAAC;QAEjD,MAAMS,IAAI,GAAGJ,QAAQ,CAACL,IAAI,CAACU,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;QAEnDjB,YAAY,CAAEkB,QAAQ,KAAM;UAC1BjB,MAAM,EAAE,CAAC,GAAGiB,QAAQ,CAACjB,MAAM,CAACkB,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEJ,WAAW,CAAC;UACnDb,QAAQ,EAAE,CACR;YACE,GAAGgB,QAAQ,CAAChB,QAAQ,CAAC,CAAC,CAAC;YACvBE,IAAI,EAAE,CAAC,GAAGc,QAAQ,CAAChB,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,CAACe,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEC,UAAU,CAACP,IAAI,CAAC;UACjE,CAAC;QAEL,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF,CAAC;IAEDb,UAAU,CAAC,CAAC;IACZ,MAAMc,QAAQ,GAAGC,WAAW,CAACf,UAAU,EAAE,KAAK,CAAC;IAE/C,OAAO,MAAMgB,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO3B,OAAA,CAACH,IAAI;IAACY,IAAI,EAAEL,SAAU;IAAC0B,OAAO,EAAE;MAAEC,UAAU,EAAE,IAAI;MAAEC,mBAAmB,EAAE;IAAM;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC7F,CAAC;AAACjC,EAAA,CA5CID,iBAAiB;AAAAmC,EAAA,GAAjBnC,iBAAiB;AA8CvB,eAAeA,iBAAiB;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}